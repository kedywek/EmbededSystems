/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

#define BLINK_TIME 1000
#define LED0 1<<6
#define LED1 1<<7
#define LED2 1<<8
#define LED3 1<<9
#define LED4 1<<4
#define LED5 1<<3
#define LED6 1<<5
#define LED7 1<<6
#define LED_R 1<<13
#define LED_B 1<<12
#define LED_G 1<<8
#define JOY_LT 1<<1
#define JOY_DN 1<<2
#define JOY_RT 1
#define JOY_GPIO GPIOE
#define JOY_PRESSED GPIO_PIN_RESET
#define NUMBER_OF_DIODES 7
#define LED_OFF GPIO_PIN_RESET
#define LED_ON GPIO_PIN_SET
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
GPIO_TypeDef* GPIO_LED[] = {
	GPIOC, GPIOC, GPIOC, GPIOC, GPIOE, GPIOD, GPIOE, GPIOE
};

GPIO_TypeDef* GPIO_RGB_LED[] = {
	GPIOD, GPIOB, GPIOD
};

uint16_t LED_PIN[] = {
	LED0, LED1, LED2, LED3, LED4, LED5, LED6, LED7
};

uint16_t LED_RGB_PIN[] = {
  LED_R, LED_G, LED_B
};

int move_direction = 1;
int current_led = 0;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void Init_GPIO_LED();
void Init_GPIO_Joystick();
void HandleJoy();
void Blink_LED();

/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  Init_GPIO_LED();
  Init_GPIO_Joystick();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    uint32_t lastUpdate = HAL_GetTick();
    HAL_GPIO_WritePin(GPIO_LED[current_led], LED_PIN[current_led], LED_ON);
    while (1) {
        if (HAL_GetTick() - lastUpdate >= BLINK_TIME) {
            lastUpdate = HAL_GetTick();
            HAL_GPIO_WritePin(GPIO_LED[current_led], LED_PIN[current_led], LED_OFF);
            current_led = (current_led + 1) % NUMBER_OF_DIODES;
            HAL_GPIO_WritePin(GPIO_LED[current_led], LED_PIN[current_led], LED_ON);
        }
        HandleJoy();
    }
  /* USER CODE END WHILE */
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */

/* USER CODE BEGIN 4 */
void Init_GPIO_LED(){
	  GPIO_InitTypeDef GPIO_InitStruct = {0};

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOB_CLK_ENABLE();
	  __HAL_RCC_GPIOC_CLK_ENABLE();
	  __HAL_RCC_GPIOD_CLK_ENABLE();
	  __HAL_RCC_GPIOE_CLK_ENABLE();

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOC, LED0|LED1|LED2|LED3, LED_OFF);
	  HAL_GPIO_WritePin(GPIOE, LED4|LED6|LED7, LED_OFF);
	  HAL_GPIO_WritePin(GPIOD, LED5|LED_B|LED_R, LED_OFF);
    HAL_GPIO_WritePin(GPIOB, LED_G, LED_OFF);

	  /*Configure GPIO LED0-LED7 pins*/
	  GPIO_InitStruct.Pin = LED0|LED1|LED2|LED3;
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	  GPIO_InitStruct.Pin = LED4|LED6|LED7;
	  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

	  GPIO_InitStruct.Pin = LED5;
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

    /*Configure RGB LED PINS*/
    GPIO_InitStruct.Pin = LED_R|LED_B;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
    GPIO_InitStruct.Pin = LED_G;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}

void Init_GPIO_Joystick(){
    GPIO_InitTypeDef GPIO_InitStruct = {0};

	  __HAL_RCC_GPIOE_CLK_ENABLE();

    GPIO_InitStruct.Pin = JOY_DN|JOY_LT|JOY_RT;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;  // Interrupt on falling edge (button press)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
}

void HandleJoy(){
  HAL_GPIO_WritePin(GPIO_RGB_LED[0], LED_RGB_PIN[0], LED_OFF);
  HAL_GPIO_WritePin(GPIO_RGB_LED[1], LED_RGB_PIN[1], LED_OFF);
  HAL_GPIO_WritePin(GPIO_RGB_LED[2], LED_RGB_PIN[2], LED_OFF);

  if(HAL_GPIO_ReadPin(JOY_GPIO, JOY_LT) == JOY_PRESSED){
    HAL_GPIO_WritePin(GPIO_RGB_LED[0], LED_RGB_PIN[0], LED_ON);
  }

  if(HAL_GPIO_ReadPin(JOY_GPIO, JOY_DN) == JOY_PRESSED){
    HAL_GPIO_WritePin(GPIO_RGB_LED[1], LED_RGB_PIN[1], LED_ON);
  }

  if(HAL_GPIO_ReadPin(JOY_GPIO, JOY_RT) == JOY_PRESSED){
    HAL_GPIO_WritePin(GPIO_RGB_LED[2], LED_RGB_PIN[2], LED_ON);
  }
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(char *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
	while(1);
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

